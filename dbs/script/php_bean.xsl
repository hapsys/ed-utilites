<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output encoding="utf-8" indent="no" method="text"/>
	<xsl:param name="package"/>
	<xsl:template match="/bean_info">
&lt;?php
/**
 *  Autogenerated class
 */
<xsl:variable name="pkg" select="translate($package, '.','\')"/>
namespace <xsl:value-of select="$pkg"/>\beans;

use c3s\db\containers\BaseBean;

<xsl:variable name="class_name">DB<xsl:value-of select="bean/@name"/>Bean</xsl:variable>
class <xsl:value-of select="$class_name"/> extends BaseBean {
	public function __construct() {
		<xsl:call-template name="prepare_mapping"/>
		<xsl:call-template name="prepare_typing"/>
	}
<xsl:call-template name="set_get">
	<xsl:with-param name="class_name" select="$class_name"/>
</xsl:call-template>

<xsl:call-template name="autoinc"/>
}
	</xsl:template>

	<xsl:template name="prepare_mapping"><xsl:for-each select="bean/column/metadata">
		$this->_map["<xsl:value-of select="@name"/>"] = "<xsl:value-of select="@label"/>";</xsl:for-each>
	</xsl:template>

	<xsl:template name="prepare_typing"><xsl:for-each select="bean/column/metadata">
		$this->_aliases["<xsl:value-of select="@label"/>"] = "<xsl:call-template name="getType"><xsl:with-param name="type" select="@type"/></xsl:call-template>";</xsl:for-each>
	</xsl:template>


	<xsl:template name="set_get">
	<xsl:param name="class_name"/>
	<xsl:for-each select="bean/column/metadata">

	/**
	 * @var <xsl:call-template name="getType"><xsl:with-param name="type" select="@type"/></xsl:call-template>
	 */
    private $_var<xsl:value-of select="@name"/>;

	/**
	 * @return <xsl:call-template name="getType"><xsl:with-param name="type" select="@type"/></xsl:call-template>
	 */
	public function get<xsl:value-of select="@name"/>() {
		return $this->_var<xsl:value-of select="@name"/>;
	}

	/**
	 * @param string $value
	 * @return <xsl:value-of select="$class_name"/>
	 */
	public function set<xsl:value-of select="@name"/>($value) {
		$this->_var<xsl:value-of select="@name"/> = $value;
		return $this;
	}
	</xsl:for-each>

	<xsl:for-each select="bean/method">
	<xsl:if test="annotation">
	/**
	<xsl:for-each select="annotation">
	* <xsl:value-of select="text()"><xsl:text>
	</xsl:text></xsl:value-of>
	</xsl:for-each>
	</xsl:if>
	public function <xsl:value-of select="@name"/>(<xsl:for-each select="parameter"><xsl:if test="position() != 1">, </xsl:if><xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:value-of select="@name"/></xsl:for-each>) {
		<xsl:value-of select="body" disable-output-escaping="yes"/>
		return $this;
	}
	</xsl:for-each>

	</xsl:template>

	<xsl:template name="autoinc">
	public function setAutoincrementField($value) {
		<xsl:for-each select="bean/column/metadata[@autoincrement='true']">
		$this->set<xsl:value-of select="@name"/>($value);
		</xsl:for-each>
	}
	</xsl:template>

	<xsl:template name="getType">
		<xsl:param name="type"/>
		<xsl:choose>
			<xsl:when test="$type = 'java.lang.Integer' or $type = 'java.lang.Byte' or $type = 'java.lang.Short' or $type = 'java.lang.Long'">int</xsl:when>
			<xsl:when test="$type = 'java.lang.Float' or $type = 'java.lang.Double'">double</xsl:when>
			<xsl:when test="$type = 'java.lang.Boolean'">boolean</xsl:when>
			<xsl:otherwise>string</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
