<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output encoding="utf-8" indent="no" method="text"/>
	<xsl:param name="package"/>
	<xsl:template match="/access_info">
&lt;?php
/**
 *  Autogenerated class
 */
 <xsl:variable name="pkg" select="translate($package, '.','\')"/>
namespace <xsl:value-of select="$pkg"/>\access;

use c3s\db\intruders\SQLIntruder;
use c3s\db\access\BaseAccess;

<xsl:for-each select="table/bean">use <xsl:value-of select="$pkg"/>\beans\DB<xsl:value-of select="@name"/>Bean;
</xsl:for-each>

<xsl:for-each select="table/bean">use <xsl:value-of select="$pkg"/>\vectors\DB<xsl:value-of select="@name"/>Vector;
</xsl:for-each>

<xsl:for-each select="table/query[string-length(@use) != 0]"><xsl:choose>
<xsl:when test="is_single = 'true'">use <xsl:value-of select="$pkg"/>\beans\DB<xsl:value-of select="@name"/>Bean;
</xsl:when>
<xsl:otherwise>use <xsl:value-of select="$pkg"/>\beans\DB<xsl:value-of select="@name"/>Vector;
</xsl:otherwise>
</xsl:choose></xsl:for-each>

<xsl:variable name="class_name">DB<xsl:value-of select="table/bean/@name"/>Access</xsl:variable>
class <xsl:value-of select="$class_name"/> extends BaseAccess {

	/**
	 * Enter description here ...
	 * @var <xsl:value-of select="$class_name"/>
	 */
	protected  static $__instance = null;

	/**
	 * @return <xsl:value-of select="$class_name"/>
	 */
	public static function getInstance() {
		if (self::$__instance == null) {
			$classname = __CLASS__;
			self::$__instance = new $classname();
		}
		return self::$__instance;
	}



	protected function __construct() {
		$this->con_name = "<xsl:value-of select="table/@connection"/>";
		$this->tablename = "<xsl:value-of select="table/@name"/>";
	}

	<xsl:variable name="param_type">DB<xsl:value-of select="table/bean[1]/@name"/>Bean</xsl:variable>
	public function insert(<xsl:value-of select="$param_type"/> $bean) {
		<xsl:if test="/access_info/table/bean/method[@name='beforeSave']">$bean->beforeSave();</xsl:if>
		$columns = array();
		<xsl:for-each select="table/bean[1]/column[@is_generated='false']/metadata[@autoincrement='false']">$columns["<xsl:value-of select="@base_name"/>"] = $bean->get<xsl:value-of select="@name"/>();
		</xsl:for-each>
		$res = $this->getConnection()->insertRow($this->tablename, $columns);
		$bean->setAutoincrementField($res);
		return $res;
	}

	<xsl:variable name="ret_type">DB<xsl:value-of select="table/bean[1]/@name"/>Vector</xsl:variable>
	<xsl:variable name="int_type">DB<xsl:value-of select="table/bean[1]/@name"/>Bean</xsl:variable>
	/**
	 * @param SQLIntruder $intruder
	 * @return <xsl:value-of select="$ret_type"/>
	 */
	public function getTableRecords(SQLIntruder $intruder = null) {

		$result = $this->_getTableRecords($intruder);

		$ret = null;
		if ($result) {
			$ret = new <xsl:value-of select="$ret_type"/>();
			foreach ($result as $res) {
				$bean = new <xsl:value-of select="$int_type"/>();
				$bean->fillBean($res);
				<xsl:if test="/access_info/table/bean/method[@name='onLoad']">$bean->onLoad();</xsl:if>
				$ret[] = $bean;
			}
		}
		return $ret;
	}

	<xsl:for-each select="table/select">
		<xsl:call-template name="select"/>
	</xsl:for-each>

	<xsl:for-each select="table/update">
		<xsl:call-template name="update"/>
	</xsl:for-each>

	<xsl:for-each select="table/delete">
		<xsl:call-template name="delete"/>
	</xsl:for-each>

	<xsl:for-each select="table/query">
		<xsl:call-template name="query"/>
	</xsl:for-each>
}
	</xsl:template>
<!--
//
// Selects
//
-->
	<xsl:template name="select">
	<xsl:variable name="ret_type">
		<xsl:choose>
			<xsl:when test="@is_single = 'true'">DB<xsl:value-of select="../bean/@name"/>Bean</xsl:when>
			<xsl:otherwise>DB<xsl:value-of select="../bean/@name"/>Vector</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	/**
	 *
	 * @return <xsl:value-of select="$ret_type"/>
	 */
	public function get<xsl:value-of select="@name"/>(<xsl:call-template name="get_params"/><xsl:if test="string-length(@intruder) != 0"><xsl:if test="count(column) != 0">, </xsl:if><xsl:value-of select="@intruder"/> $paramIntruder = null</xsl:if>)  {
		$ret = null;
		$intruder = new SQLIntruder();
		<xsl:if test="string-length(@intruder) != 0">
		if ($paramIntruder != null) {
			$intruder = $paramIntruder;
		}
		</xsl:if>
		$sql = "SELECT t.* ".$intruder->getRecordQuery()." FROM ".$this->tablename." as t ".$intruder->getFromQuery()." WHERE 1=1 <xsl:call-template name="get_sql_params"/> ".$intruder->getWhereQuery()." ";
		if ($intruder->getOrderQuery()) {
			$sql .= $intruder->getOrderQuery();
		} else {
			<xsl:if test="string-length(sort) != 0">$sql .= " ORDER BY <xsl:value-of select="sort"/> ";</xsl:if>
		}
		if ($intruder->getLimitQuery()) {
			$sql .= $intruder->getLimitQuery();
		} else {
			<xsl:if test="@is_single = 'true'">$sql .= " LIMIT 1 ";</xsl:if>
		}
		$result = $this->getConnection()->getTable($sql, array(<xsl:call-template name="get_params"/>));
		if ($result) {
			$ret = new <xsl:value-of select="$ret_type"/>();
			<xsl:choose>
				<xsl:when test="@is_single = 'true'">
			$ret->fillBean($result[0]);
			<xsl:if test="/access_info/table/bean/method[@name='onLoad']">$ret->onLoad();</xsl:if>
				</xsl:when>
				<xsl:otherwise>
			foreach ($result as $res) {
				$bean = new DB<xsl:value-of select="../bean/@name"/>Bean();
				$bean->fillBean($res);
				<xsl:if test="/access_info/table/bean/method[@name='onLoad']">$bean->onLoad();</xsl:if>
				$ret[] = $bean;
			}
				</xsl:otherwise>
			</xsl:choose>
		}
		return $ret;
	}
	</xsl:template>
<!--
//
// Common Parameters
//
-->
	<xsl:template name="get_params">
		<xsl:for-each select="column[@omitted='true']"><xsl:if test="position() != 1">, </xsl:if>$param<xsl:value-of select="@param_name"/></xsl:for-each>
	</xsl:template>
	<xsl:template name="get_params_for_update">
		<xsl:for-each select="column[@omitted='true']">, $param<xsl:value-of select="@param_name"/></xsl:for-each>
	</xsl:template>
	<xsl:template name="get_params_without_type">
		<xsl:for-each select="column"><xsl:if test="position() != 1">, </xsl:if>$param<xsl:value-of select="@param_name"/></xsl:for-each>
	</xsl:template>
	<xsl:template name="get_sql_params">
		<xsl:for-each select="column">AND  <xsl:value-of select="@name"/> <xsl:value-of select="@condition" disable-output-escaping="yes"/> <xsl:choose>
			<xsl:when test="@omitted = 'false'">
				<xsl:choose>
					<xsl:when test="@type = 'java.lang.String'">"<xsl:value-of select="@value"/>"</xsl:when>
					<xsl:otherwise><xsl:value-of select="@value"/></xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise> ? </xsl:otherwise>
		</xsl:choose></xsl:for-each>
	</xsl:template>
	<xsl:template name="get_fetch_params">
		<xsl:for-each select="column">,  $param<xsl:value-of select="@param_name"/></xsl:for-each>
	</xsl:template>

<!--
//
// Updates
//
-->
	<xsl:template name="update">
	<xsl:variable name="param_type">DB<xsl:value-of select="../bean/@name"/>Bean</xsl:variable>
	/**
	 *
	 * @return int
	 */
	public function update<xsl:value-of select="@name"/>(<xsl:value-of select="$param_type"/> $bean<xsl:call-template name="get_params_for_update"/>) {
		<xsl:if test="/access_info/table/bean/method[@name='beforeSave']">$bean->beforeSave();</xsl:if>
		$keys = array();
		 <xsl:for-each select="column">
		$keys["<xsl:value-of select="@name"/>"] = <xsl:choose>
			<xsl:when test="@omitted = 'false'">
				<xsl:choose>
					<xsl:when test="@type = 'java.lang.String'">"<xsl:value-of select="@value"/>"</xsl:when>
					<xsl:otherwise><xsl:value-of select="@value"/></xsl:otherwise>
				</xsl:choose>
				</xsl:when>
				<xsl:otherwise> $param<xsl:value-of select="@param_name"/> </xsl:otherwise>
			</xsl:choose>;
		 </xsl:for-each>
		return $this->getConnection()->updateRow("<xsl:value-of select="../@name"/>", $bean->__toArray(false), $keys);
	}
	</xsl:template>

<!--
//
// Deletes
//
-->
	/**
	 *
	 * @return int
	 */
	<xsl:template name="delete">
	public function delete<xsl:value-of select="@name"/>(<xsl:call-template name="get_params"/>) {
		$params = array(<xsl:call-template name="get_params"/>);
		$sql = "DELETE FROM ".$this->tablename." WHERE  1=1 <xsl:call-template name="get_sql_params"/> ";
		return $this->getConnection()->query($sql, $params);
	}
	</xsl:template>

<!--
//
// Common queries
//
-->
	<xsl:template name="query">
	<xsl:variable name="ret_type">
		<xsl:choose>
			<xsl:when test="@prefix != 'get'">int</xsl:when>
			<xsl:when test="@is_single = 'true' and string-length(@use) != 0">DB<xsl:value-of select="@use"/>Bean</xsl:when>
			<xsl:when test="string-length(@use) != 0">DB<xsl:value-of select="@use"/>Vector</xsl:when>
			<xsl:when test="@is_single = 'true'">DB<xsl:value-of select="@name"/>Bean</xsl:when>
			<xsl:otherwise>DB<xsl:value-of select="@name"/>Vector</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	/**
	 * @return <xsl:value-of select="$ret_type"/>
	 */
	public function <xsl:value-of select="@prefix"/><xsl:value-of select="@name"/>(<xsl:call-template name="get_query_params"/><xsl:if test="string-length(@intruder) != 0"><xsl:if test="count(parameter) != 0">, </xsl:if><xsl:value-of select="@intruder"/> $paramIntruder</xsl:if>) {
		$intruder = new SQLIntruder();
		<xsl:if test="string-length(@intruder) != 0">
		if ($paramIntruder != null) {
			$intruder = $paramIntruder;
		}
		</xsl:if>

		$query = $intruder->getFullQuery();
		if ($query == null) {
			$record = $intruder->getRecordQuery();
			$from = $intruder->getFromQuery();
			$join = $intruder->getJoinQuery();
			$where = $intruder->getWhereQuery();
			$order = $intruder->getOrderQuery();
			$limit = $intruder->getLimitQuery();
			$query = "<xsl:apply-templates select="sql"/>";
		}

		<xsl:choose>
			<xsl:when test="@prefix != 'get'">
		$ret = $this->getConnection()->query($query<xsl:call-template name="get_query_internal_params"/>);
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="in_class">
					<xsl:choose>
						<xsl:when test="string-length(@use) != 0">DB<xsl:value-of select="@use"/>Bean</xsl:when>
						<xsl:otherwise>DB<xsl:value-of select="@name"/>Bean</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
		$result =  $this->getConnection()->getTable($query <xsl:call-template name="get_query_internal_params"/>);
		$ret = null;
		if ($result) {
				<xsl:choose>
					<xsl:when test="@is_single = 'true'">
			$ret = new <xsl:value-of select="$ret_type"/>();
			$ret->fillBean($result[0]);
					</xsl:when>
					<xsl:otherwise>
			$ret = new DB<xsl:value-of select="@name"/>Vector();
			foreach ($result as $res) {
				<xsl:choose>
					<xsl:when test="string-length(@use) != 0">
				$bean = new DB<xsl:value-of select="@use"/>Bean();
					</xsl:when>
					<xsl:otherwise>
				$bean = new DB<xsl:value-of select="@name"/>Bean();
					</xsl:otherwise>
				</xsl:choose>
				$bean->fillBean($res);
				$ret[] = $bean;
			}
					</xsl:otherwise>
				</xsl:choose>
		}
			</xsl:otherwise>
		</xsl:choose>
		return $ret;
	}
	</xsl:template>
<!--
//
// SQL template
//
-->
	<xsl:template match="sql">
		<xsl:for-each select="*|text()">
			<xsl:choose>
				<xsl:when test="name()='record'">".$record."</xsl:when>
				<xsl:when test="name()='join'">".$join."</xsl:when>
				<xsl:when test="name()='where'">".$where."</xsl:when>
				<xsl:when test="name()='limit'">".$limit."</xsl:when>
				<xsl:when test="name()='order'">".$order."</xsl:when>
				<xsl:when test="name()='from'">".$from."</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="translate(., '&#10;&#13;', '  ')" disable-output-escaping="yes"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>

<!--
//
// Query Parameters
//
-->
	<xsl:template name="get_query_params">
		<xsl:for-each select="parameter"><xsl:if test="position() != 1">, </xsl:if>$param<xsl:value-of select="@name"/></xsl:for-each>
	</xsl:template>

	<xsl:template name="get_query_internal_params">
		<xsl:if test="count(parameter) != 0">, array(<xsl:for-each select="parameter"><xsl:if test="position() != 1">, </xsl:if>$param<xsl:value-of select="@name"/></xsl:for-each>)</xsl:if>
	</xsl:template>

</xsl:stylesheet>
