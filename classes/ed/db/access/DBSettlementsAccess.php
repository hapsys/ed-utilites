<?php
/**
 *  Autogenerated class
 */
 
namespace ed\db\access;

use c3s\db\intruders\SQLIntruder;
use c3s\db\access\BaseAccess;

use ed\db\beans\DBSettlementsBean;
use ed\db\beans\DBSettlementsSearchBean;
use ed\db\beans\DBCountBySystemAndNameBean;
use ed\db\vectors\DBSettlementsVector;
use ed\db\vectors\DBSettlementsSearchVector;
use ed\db\vectors\DBCountBySystemAndNameVector;

class DBSettlementsAccess extends BaseAccess {

	/**
	 * Enter description here ...
	 * @var DBSettlementsAccess
	 */
	protected  static $__instance = null;

	/**
	 * @return DBSettlementsAccess
	 */
	public static function getInstance() {
		if (self::$__instance == null) {
			$classname = __CLASS__;
			self::$__instance = new $classname();
		}
		return self::$__instance;
	}



	protected function __construct() {
		$this->con_name = "default";
		$this->tablename = "settlements";
	}

	
	public function insert(DBSettlementsBean $bean) {
		
		$columns = array();
		$columns["planet"] = $bean->getPlanet();
		$columns["settlement_type_id"] = $bean->getSettlementTypeId();
		$columns["name"] = $bean->getName();
		$columns["system_id"] = $bean->getSystemId();
		
		$res = $this->getConnection()->insertRow($this->tablename, $columns);
		$bean->setAutoincrementField($res);
		return $res;
	}

	
	/**
	 * @param SQLIntruder $intruder
	 * @return DBSettlementsVector
	 */
	public function getTableRecords(SQLIntruder $intruder = null) {

		$result = $this->_getTableRecords($intruder);

		$ret = null;
		if ($result) {
			$ret = new DBSettlementsVector();
			foreach ($result as $res) {
				$bean = new DBSettlementsBean();
				$bean->fillBean($res);
				
				$ret[] = $bean;
			}
		}
		return $ret;
	}

	
	/**
	 *
	 * @return DBSettlementsBean
	 */
	public function getByPrimaryKey($paramSettlementId)  {
		$ret = null;
		$intruder = new SQLIntruder();
		
		$sql = "SELECT t.* ".$intruder->getRecordQuery()." FROM ".$this->tablename." as t ".$intruder->getFromQuery()." WHERE 1=1 AND  settlement_id= ?  ".$intruder->getWhereQuery()." ";
		if ($intruder->getOrderQuery()) {
			$sql .= $intruder->getOrderQuery();
		} else {
			
		}
		if ($intruder->getLimitQuery()) {
			$sql .= $intruder->getLimitQuery();
		} else {
			$sql .= " LIMIT 1 ";
		}
		$result = $this->getConnection()->getTable($sql, array($paramSettlementId));
		if ($result) {
			$ret = new DBSettlementsBean();
			
			$ret->fillBean($result[0]);
			
		}
		return $ret;
	}
	
	/**
	 *
	 * @return int
	 */
	public function updateByPrimaryKey(DBSettlementsBean $bean, $paramSettlementId) {
		
		$keys = array();
		 
		$keys["settlement_id"] =  $paramSettlementId;
		 
		return $this->getConnection()->updateRow("settlements", $bean->__toArray(false), $keys);
	}
	
	/**
	 * @return DBSettlementsSearchVector
	 */
	public function getSettlementsSearch(\ed\systems\filter\InFilter $paramIntruder) {
		$intruder = new SQLIntruder();
		
		if ($paramIntruder != null) {
			$intruder = $paramIntruder;
		}
		

		$query = $intruder->getFullQuery();
		if ($query == null) {
			$record = $intruder->getRecordQuery();
			$from = $intruder->getFromQuery();
			$join = $intruder->getJoinQuery();
			$where = $intruder->getWhereQuery();
			$order = $intruder->getOrderQuery();
			$limit = $intruder->getLimitQuery();
			$query = " 				SELECT t.title, st.*, s.name as system_name, s.x, s.y, s.z 				FROM settlement_types t, settlements st, systems_hash s 				WHERE 1=1 				".$where." 				AND t.settlement_type_id = st.settlement_type_id 				AND st.system_id = s.system_id      			";
		}

		
		$result =  $this->getConnection()->getTable($query );
		$ret = null;
		if ($result) {
				
			$ret = new DBSettlementsSearchVector();
			foreach ($result as $res) {
				
				$bean = new DBSettlementsSearchBean();
					
				$bean->fillBean($res);
				$ret[] = $bean;
			}
					
		}
			
		return $ret;
	}
	
	/**
	 * @return DBCountBySystemAndNameBean
	 */
	public function getCountBySystemAndName($paramsystem_id, $paramname) {
		$intruder = new SQLIntruder();
		

		$query = $intruder->getFullQuery();
		if ($query == null) {
			$record = $intruder->getRecordQuery();
			$from = $intruder->getFromQuery();
			$join = $intruder->getJoinQuery();
			$where = $intruder->getWhereQuery();
			$order = $intruder->getOrderQuery();
			$limit = $intruder->getLimitQuery();
			$query = " 				SELECT COUNT(st.settlement_id) AS count 				FROM settlements st 				WHERE st.system_id = ? 				AND LOWER(st.name) = ? 				LIMIT 1 			";
		}

		
		$result =  $this->getConnection()->getTable($query , array($paramsystem_id, $paramname));
		$ret = null;
		if ($result) {
				
			$ret = new DBCountBySystemAndNameBean();
			$ret->fillBean($result[0]);
					
		}
			
		return $ret;
	}
	
}